<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Enhanced Snake Game</title>
  <style>
    body {
      margin: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: #2c3e50; /* Midnight Blue */
      color: #ecf0f1; /* Clouds */
      font-family: 'Arial', sans-serif;
    }
    canvas {
      border: 2px solid #ecf0f1; /* Clouds */
    }
    #gameMode {
      margin-top: 10px;
    }
    #score {
      margin-top: 10px;
    }
    #gameOver {
      display: none;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.8);
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      color: #ecf0f1; /* Clouds */
    }
    #restartButton {
      background-color: #3498db; /* Belize Hole */
      color: #ecf0f1; /* Clouds */
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <canvas id="snakeCanvas"></canvas>
  <div id="gameMode"></div>
  <div id="score"></div>
  <div id="gameOver">
    <h2>Game Over!</h2>
    <p>Your Score: <span id="finalScore">0</span></p>
    <button id="restartButton">Restart</button>
  </div>

  <script>
    const gridSize = 20;
    const canvasSize = 30;
    const canvas = document.getElementById('snakeCanvas');
    const ctx = canvas.getContext('2d');
    const canvasWidth = canvasSize * gridSize;
    const canvasHeight = canvasSize * gridSize;
    let snake = [{ x: 5, y: 5 }];
    let direction = 'right';
    let nextDirection = 'right';
    let food = { x: 10, y: 10 };
    let gameSpeed = 200;
    let gameLoop;
    let gameModeText = 'Normal Speed';
    let score = 0;
    let isGameOver = false;

    // Set canvas size explicitly
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;

    document.addEventListener('keydown', handleKeyPress);

    initGame();

    function initGame() {
      const selectedMode = prompt("Select game mode:\n1 - Normal Speed\n2 - Fast Speed\n3 - Super Fast Speed");
      setGameMode(selectedMode);

      snake = [{ x: 5, y: 5 }];
      direction = 'right';
      nextDirection = 'right';
      generateFood();
      updateGameModeText();
      gameLoop = setInterval(updateGame, gameSpeed);
    }

    function setGameMode(mode) {
      switch (mode) {
        case '1':
          changeGameSpeed(200, 'Normal Speed');
          break;
        case '2':
          changeGameSpeed(150, 'Fast Speed');
          break;
        case '3':
          changeGameSpeed(100, 'Super Fast Speed');
          break;
        default:
          // Default to normal speed
          changeGameSpeed(200, 'Normal Speed');
          break;
      }
    }

    function updateGame() {
      if (isGameOver) return;

      direction = nextDirection;
      moveSnake();
      checkCollision();
      checkFood();
      drawGame();
    }

    function moveSnake() {
      const head = { ...snake[0] };

      switch (direction) {
        case 'up':
          head.y -= 1;
          break;
        case 'down':
          head.y += 1;
          break;
        case 'left':
          head.x -= 1;
          break;
        case 'right':
          head.x += 1;
          break;
      }

      snake.unshift(head);
      if (!(head.x === food.x && head.y === food.y)) {
        snake.pop();
      }
    }

    function checkCollision() {
      const head = snake[0];
      if (head.x < 0 || head.x >= canvasSize || head.y < 0 || head.y >= canvasSize) {
        handleGameOver();
      }
      for (let i = 1; i < snake.length; i++) {
        if (head.x === snake[i].x && head.y === snake[i].y) {
          handleGameOver();
        }
      }
    }

    function checkFood() {
      const head = snake[0];
      if (head.x === food.x && head.y === food.y) {
        snake.push({ ...food });
        generateFood();
        updateScore();
      }
    }

    function updateScore() {
      score++;
      const scoreElement = document.getElementById('score');
      scoreElement.textContent = `Score: ${score}`;
    }

    function drawGame() {
      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw Snake
      ctx.fillStyle = '#1abc9c'; /* Turquoise */
      snake.forEach((segment, index) => {
        ctx.beginPath();
        const isHead = index === 0;
        const isTail = index === snake.length - 1;
        const radius = gridSize / 2;

        if (isHead) {
          drawRound(segment.x, segment.y, radius);
        } else if (isTail) {
          drawRound(segment.x, segment.y, radius);
        } else {
          drawSquare(segment.x, segment.y);
        }

        ctx.fill();
      });

      // Draw Food
      ctx.fillStyle = '#e74c3c'; /* Alizarin */
      ctx.beginPath();
      ctx.arc((food.x + 0.5) * gridSize, (food.y + 0.5) * gridSize, gridSize / 2, 0, 2 * Math.PI);
      ctx.fill();

      // Draw Game Mode Text
      ctx.fillStyle = '#ecf0f1'; /* Clouds */
      ctx.font = '18px Arial';
      ctx.fillText(gameModeText, 10, 20);
    }

    function generateFood() {
      food = {
        x: Math.floor(Math.random() * canvasSize),
        y: Math.floor(Math.random() * canvasSize)
      };
    }

    function handleKeyPress(event) {
      switch (event.key) {
        case 'ArrowUp':
          if (direction !== 'down') nextDirection = 'up';
          break;
        case 'ArrowDown':
          if (direction !== 'up') nextDirection = 'down';
          break;
        case 'ArrowLeft':
          if (direction !== 'right') nextDirection = 'left';
          break;
        case 'ArrowRight':
          if (direction !== 'left') nextDirection = 'right';
          break;
      }
    }

    function changeGameSpeed(speed, modeText) {
      clearInterval(gameLoop);
      gameSpeed = speed;
      gameModeText = modeText;
      updateGameModeText();
      gameLoop = setInterval(updateGame, gameSpeed);
    }

    function updateGameModeText() {
      const gameModeElement = document.getElementById('gameMode');
      gameModeElement.textContent = `Game Mode: ${gameModeText}`;
    }

    function handleGameOver() {
      clearInterval(gameLoop);
      isGameOver = true;
      const finalScoreElement = document.getElementById('finalScore');
      finalScoreElement.textContent = score;
      const gameOverElement = document.getElementById('gameOver');
      gameOverElement.style.display = 'block';
    }

    function drawRound(x, y, radius) {
      ctx.arc((x + 0.5) * gridSize, (y + 0.5) * gridSize, radius, 0, 2 * Math.PI);
      ctx.closePath();
    }

    function drawSquare(x, y) {
      ctx.rect(x * gridSize, y * gridSize, gridSize, gridSize);
    }
  </script>
</body>
</html>
